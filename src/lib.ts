import type { ClassDeclaration, Statement } from "@babel/types";
import * as prettier from "prettier";

let FILENAME = "";
let COMPONENTNAME = "";
let IMPORTDECLARATIONS = new Set<string>();
let GLOBALVARIABLES = new Set<string>();
let EXPORTNAMEDDECLARATION = new Set<string>();
let EXPORTDEFAULTDECLARATION = "";
let STATEVARIABLES = new Map<string, any>();

export function isReactClassComponent(stmt: ClassDeclaration) {
  FILENAME = stmt.loc?.filename!;
  COMPONENTNAME = stmt.id?.name!;
  const objectName = stmt.superClass?.object?.name;
  const propertyName = stmt.superClass?.property?.name;

  return (
    stmt.superClass?.name === "Component" ||
    (objectName === "React" && propertyName === "Component")
  );
}

export function handleOtherDeclarations(type: string, slice: string) {
  switch (type) {
    case "ImportDeclaration":
      IMPORTDECLARATIONS.add(slice);
      break;
    case "VariableDeclaration":
      GLOBALVARIABLES.add(slice);
      break;
    case "FunctionDeclaration":
      break;
    case "ExportNamedDeclaration":
      EXPORTNAMEDDECLARATION.add(slice);
      break;
    case "ExportDefaultDeclaration":
      EXPORTDEFAULTDECLARATION = slice;
      break;
    default:
      break;
  }
}

export function processConstructorBody(body: Statement[], source: string) {
  // console.log(body);
  body.forEach((stmt, idx, _) => {
    if (
      stmt.type === "ExpressionStatement" &&
      stmt.expression.type === "AssignmentExpression" &&
      stmt.expression.left.type === "MemberExpression" &&
      stmt.expression.left.object.type === "ThisExpression"
    ) {
      // console.log(stmt.expression.left.object);
      const start: number = stmt.expression.left.start!;
      const end: number = stmt.expression.left.end!;
      const slice = source.slice(start, end + 1);

      // let's see if we are dealing with state variables
      if (slice.includes("this.state")) {
        console.log("initializing state...");

        // console.log(stmt.expression.right);
        const rightExpression = stmt.expression.right;
        if (rightExpression.type === "ObjectExpression") {
          rightExpression.properties.forEach((prop, idx, _) => {
            if (prop.type === "ObjectProperty") {
              let name: string = prop.key.name;
              let value: any = prop.value.value;
              STATEVARIABLES.set(name, value);
            }
          });
        }
      }
      //      console.log(stmt.expression.right);
    }
  });
}
export function handleClassDeclaration(stmt: ClassDeclaration, source: string) {
  let inputFilePath = "FileName.jsx";
  if (isReactClassComponent(stmt)) {
    // process react class component
    // console.log(stmt);
    const className = stmt.id?.name;
    const classBody = stmt.body.body;
    // console.log(stmt.body);

    classBody.forEach((value, idx, _) => {
      if (value.type === "ClassMethod" && value.kind === "constructor") {
        console.log("we have a constructor");
        const constructorBody = value.body.body;
        processConstructorBody(constructorBody, source);
      }
    });
  } else {
    throw new Error(`${inputFilePath} is not a React class component`);
  }
}

export function generateFunctionComponent() {
  console.log("processing complete...generating function component...");
  let inputFileFragments = FILENAME.split(".");
  let outPutFile = `
  /**
  * source: ${FILENAME}
  * destination: ${inputFileFragments[0] + ".func." + inputFileFragments[1]}
  *
  * generated by rc2f on ${new Date().toISOString()}
  *
  * */

  `;
  // append import statements

  let imports = "";
  Array.from(IMPORTDECLARATIONS).forEach((decl, idx, _) => {
    if (decl.includes("react")) {
      decl = decl.replace("Component", "");

      let frag1 = decl.split("{");
      let frag2 = frag1[1].split("}");
      let result = frag1[0] + `${"{ useState, " + frag2[0] + "}"}` + frag2[1];
      imports += result;
    } else {
      imports += decl;
    }
  });
  outPutFile += imports;

  // format with prettier
  prettier.format(outPutFile, { parser: "babel" }).then((val) => {
    console.log(val);
  });
}
